#!/bin/sh
set -e
required="awk ssh git hostname basename"
test -z $HOST           && host=$USER@$(hostname) || host=$HOST
test -z "$RECIPE_REPOS" && RECIPE_REPOS="https://raw.githubusercontent.com/coderofsalvation/podi/master/recipe/index.txt"
test -z $PODI_APP       && export PODI_APP=$(basename $(pwd))
#trap "trigger cleanup" 0 1 2 3 6
C_GREY="\\033[1;30m"
C_BOLD="\\033[1;37;40m"
C_NORMAL="\\033[0;0m"
C_CYAN="\\033[1;36m"
C_PURPLE="\\033[38;5;207m"
C_RED="\\033[0;31m"

# some hipster wrappers to make things readable and sexy later on
try()        { set +e; "$@"; set -e; return 0;     }
silent()     { "$@" 1>/dev/null 2>/dev/null; return $?; }
installed()  { which $1 2>/dev/null 1>/dev/null;   }
verbose()    { printf "  $C_BOLD\$$C_NORMAL $*\n"; "$@"; }
prompt()     { printf " [?] $C_CYAN$1$C_NORMAL"; printf "\n$2\n  $3> "; read answer; }
error()      { printf " [$C_RED"e"$C_NORMAL] %s\n" "$*"; exit 1; }
print()      { printf "  $C_PURPLE│ $C_NORMAL %s\n" "$*"; return 0; }
soften()     { cat | while IFS='' read line; do printf "  $C_PURPLE| $C_GREY%s$C_NORMAL\n" "$line"; done; }
header()     { h=$1; shift; printf "  $C_PURPLE├─ $C_CYAN""%s""$C_PURPLE $C_NORMAL%s\n" "$h" "$*"; }
evalfunc()   { type $1 | awk 'NR>2 && /^[^{][^}]/ { print $0 }'; }
on()         { export on_$1="$2 $(eval echo \$on_$1)"; }
init_dirs()  { test -d .git || git init; test -d .pod || mkdir .pod; }
foreach()    { local err=0; local args="$1"; 
               shift; 
               for j in $args; do "$@" "$j" || err=1; done
               test $err = 1 && return 1 || return 0
             }

trigger()    { printf "$C_NORMAL [$C_CYAN✓$C_NORMAL] $C_BOLD%s$C_NORMAL\n" "$1"
               local cmd=$1; shift
               local actions="$(eval echo \$on_$cmd)"
               set +e
               if test -n "$actions"; then 
                 silent try type $cmd && { $cmd "$@"; }
                 for it in $actions; do trigger $it "$@"; done 
               else 
                 silent type $cmd || return 0; 
                 silent type $cmd && $cmd "$@"; 
               fi 
               set -e
               return $?
             }

init_post_receive(){
  echo "#!/bin/sh
    export PODI_GITPUSH=1
    export PODI_REMOTE=$2
    export PODI_USER=$3
    export PODI_PORT=$4
    export PODI_BRANCH=$4
    export PODI_APP=$(basename $(pwd))
    export PODI_COMMIT=\$(git --work-tree=$1 --git-dir=$1/.git log -n1 --pretty=format:\"%h\")
    cd $1
    mkdir .tmp
    git --work-tree=$1/.tmp --git-dir=$1/.git checkout -f $PODI_BRANCH
    test -f .tmp/podi && {
      test -f podi  && rm podi
      test -d .pod && rm -rf .pod
      cp -r .tmp/podi .tmp/.pod .
    }
    rm -rf .tmp
    test -f podi && ./podi deploy 
  " | awk '{ gsub("^[ ]+","",$0); print $0 }'
}

loadremote(){
  cfg=.pod/$1/$2/config
  test -f $cfg || error "remote (.pod/$1/$2/config) does not exist"
  . $cfg
}

hello(){
  echo -e '
\e[38;5;57m                                     88  88  
\e[38;5;93m                                     88      
\e[38;5;129m  8b,dPPYba,    ,adPPYba,    ,adPPYb,88  88  
\e[38;5;165m  88P`    "8a  a8"     "8a  a8"    `Y88  88  
\e[0m  88       d8  8b       d8  8b       88  88  
\e[38;5;201m  88b,   ,a8"  "8a,   ,a8"  "8a,   ,d88  88  
\e[38;5;201m  88`YbbdP"`    `"YbbdP"`    `"8bbdP"Y8  88  
\e[38;5;205m  88                                         
\e[0m'
}

init(){ # init git@server:/dir/to/deploy [branch] [port] [name] : initializes a deployment 
  echo "$1" | silent grep ":" || usage
  test -z $1 && usage 
  trigger init_localhost
  trigger init_server "$@"
}

init_localhost(){
  init_dirs 
  test -f .pod/pipeline   || { 
    test -d .pod || mkdir -p .pod
    test -f .pod/pipeline || recipe pipeline
    test -d .pod/run || {
      prompt "how to run this app?" "$(recipe | grep '^run/' | cat -n)" 
      runtime=$(recipe | grep '^run/' | awk "NR == $answer { print \$0 }")
      silent recipe $runtime && . .pod/$runtime
      init_runtime
    }
    test -d .pod && for i in .pod/*; do . $i; done 
    test -f podi || cp $0 .
  }
}

# <user@server:path> [branch] [port]
init_server(){
  user=$(    echo $1 | awk '{ gsub("@.*","",$0); print $0 }')
  server=$(  echo $1 | awk '{ gsub(".*@","",$0); gsub(":.*","",$0); print $0 }')
  gitpath=$( echo $1 | awk '{ gsub(".*:","",$0); print $0 }')
  appname=$(basename $gitpath)
  test -z $2 && branch=$(git branch | awk '/^\*/ { print $2 }') || branch=$2
  test -z $3 && port=22 || port=$3
  mkdir -p .pod/$user@$server
  local config=.pod/$user@$server/$appname/config
  mkdir -p $(dirname $config)
  echo "export server='$server'                      " >  $config
  echo "export port='$port'                          " >> $config
  echo "export user='$user'                          " >> $config
  echo "export gitpath='$gitpath'                    " >> $config
  echo "export appname='$appname'                    " >> $config
  echo "export branch='$branch'                      " >> $config
  . $config 
  try silent ssh -p $port $user@$server HOST=$user@$server mkdir $gitpath
  scp -r -P $port $0 .pod $user@$server:$gitpath/. 1>/dev/null
  try ssh -p $port $user@$server "cd $gitpath; ./podi init_gitops $gitpath $server $user $port $branch"
  set +e
  init_dirs 
  init_remotes 
  silent git push $appname $branch 
  print "you can now run: git push $appname $branch"
  export PODI_SERVER=$server 
  export PODI_BRANCH=$branch
}

# <path> <server> <user> <port> <branch>
init_gitops(){
  git --version 1>/dev/null 2>/dev/null || error please install git on $server 
  test -d $1 || mkdir $1
  test -d $1/.git && printf "already initialized: $C_GREY$1/.git$C_NORMAL\n"
  test -d $1/.git || {
    silent git init --bare "$1/.git" || error could not create $1/.git
  }
  init_post_receive $1 $2 $3 $4 $5 > $1/.git/hooks/post-receive
  chmod +x $1/.git/hooks/post-receive
}

recipe(){ # recipe <name_or_url> : installs a recipe from podi repo or url
  list(){
    for repo in $RECIPE_REPOS; do 
      print $(dirname $repo)
      curl -s $repo
    done
  }
  install(){
    init_dirs
    for repo in $RECIPE_REPOS; do 
      curl -s $repo | silent grep -E "^$1$" && {
        print "writing .pod/$1"
        dir=$(dirname $1)
        test -d .pod/$dir || mkdir -p .pod/$dir
        curl -s $(dirname $repo)/$1 > .pod/$dir/$(basename $1)
      }
    done
  }
  test -z $1 && list
  test -z $1 || install $1
}

init_remotes(){
  find .pod | silent grep config || return 0
  for config in .pod/*@*/*/config; do 
    . $config
    git remote | silent grep $appname || {
      header "adding git remote: $appname"
      git remote add -t $branch $appname ssh://$user@$server:$port$gitpath/.git
    }
  done
}

usage(){
  init_dirs
  test -d .git && silent grep "bare = true" .git/config && { echo "Usage: ./podi start\n./podi stop"; exit 0; } 
  echo "usage: "
  awk '/[a-zA-Z0-9_]+\(\){ #/ { 
    info=$0 
    gsub(".* : ","",info)
    gsub(".*{ # ","",$0)
    gsub(" :.*","",$0)
    printf("    %-55s %s\n",$0,info)
  }' $0 $(find .pod -type f | awk '{ printf "%s ",$0 }') 2>/dev/null
  echo 
  init_remotes
  printf "deploy targets:\n"
  git remote | awk '{ printf("   %s\n",$1) }'
  exit 0
}

foreach "$required" installed || error "please install: $required" 
# source external variables, functions and decorators 
test -d  .pod && for i in $(find .pod -type f); do . $i; done 
test -z $1 && usage
trigger "$@"
